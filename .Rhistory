"lifecycle_id"=lifecycle_id)(patients)
switch(attribute_name,
"case_id"=~case_id,
"activity_id"=activity_id,
"activity_instance_id" = activity_instance_id,
"resource_id"=resource_id,
"lifecycle_id"=lifecycle_id) -> f
f(patients)
f
as.formula(f)
as.formula(f)(patients)
as.formula(f(patients)
)
~f(patients)
f(patients)
f
switch(attribute_name,
"case_id"=~case_id,
"activity_id"=activity_id,
"activity_instance_id" = activity_instance_id,
"resource_id"=resource_id,
"lifecycle_id"=lifecycle_id) -> f
f
f(patients)
mean
switch(attribute_name,
"case_id"=case_id,
"activity_id"=activity_id,
"activity_instance_id" = activity_instance_id,
"resource_id"=resource_id,
"lifecycle_id"=lifecycle_id) -> f
f
test <- mean
test
test(1:3)
f
f(patients)
f
f(patients)
switch(attribute_name,
"case_id"=case_id,
"activity_id"=activity_id,
"activity_instance_id" = activity_instance_id,
"resource_id"=resource_id,
"lifecycle_id"=lifecycle_id) -> f
f(patients)
print(f)
switch(attribute_name,
"case_id"=case_id,
"activity_id"=activity_id,
"activity_instance_id" = activity_instance_id,
"resource_id"=resource_id,
"lifecycle_id"=lifecycle_id) -> f
print(f)
patients
patients %>% eventlog()
library(bupaR)
patients %>% eventlog()
patients %>% eventlog(case_id = "test")
patients %>% eventlog(case_id = "handlinhg")
patients %>% eventlog(case_id = "handling")
patients %>% eventlog(case_id = "handling") %>% str
patients %>% eventlog(case_id = "employee") %>% str
patients %>% eventlog(case_id = "employee")
library(bupaRÂµ)
library(bupaR)
patients
patients %>% eventlog
patients %>% eventlog()
patients %>% group_by_case
patients %>% group_by_case %>% eventlog()
library(bupaR)
patients %>% group_by_case %>% eventlog()
library(bupaR)
patients %>% group_by_case %>% eventlog()
library(bupaR)
patients %>% group_by_case %>% eventlog()
library(bupaR)
summary(patients)
patients %>% group_by_case
library(bupaR)
patients %>% group_by_case
library(bupaR)
patients %>% group_by_case %>% summary
iris
iris %>% summary
iris %>% group_by(Species) summary
iris %>% group_by(Species) %>% summary
library(bupaR)
patients %>% summary()
patients %>% group_by_case %>% summary()
traces(patients)
?warning
warning(test)
warning(test, call = F)
warning("test")
warning("test", call = F)
warning("test", call. = F)
function f(){warning("test", call. = F)}
function(){warning("test", call. = F)}
function(){warning("test", call. = F)}()
library(bupaR)
traces(patient)
traces(patients)
patients
patients %>% mutate(g = floor(patient/100))
patients %>% mutate(g = floor(patient/100)+1)
patients %>% mutate(g = floor(patient/100)+1) %>% group_by(g)
patients %>% mutate(g = floor(patient/100)+1) %>% group_by(g) %>% traces()
patients %>% mutate(g = floor(patient/100)+1) %>% group_by(g) %>% n_traces()
library(bupaR)
iris %>% group_by(species)
iris %>% group_by(Species)
library(bupaR)
patients %>% mutate(g = floor(patient/100)+1) %>% group_by(g)
library(bupaR)
patients %>% mutate(g = floor(patient/100)+1) %>% group_by(g)
iris %>% group_by(Species, Sepal.Length)
library(bupaR)
patients %>% mutate(g = floor(patient/100)+1) %>% group_by(g)
library(bupaR)
patients %>% mutate(g = floor(patient/100)+1) %>% group_by(g)
library(bupaR)
patients %>% mutate(g = floor(patient/100)+1) %>% group_by(g)
library(bupaR)
patients %>% mutate(g = floor(patient/100)+1) %>% group_by(g)
library(bupaR)
patients %>% mutate(g = floor(patient/100)+1) %>% group_by(g)
library(bupaR)
patients %>% mutate(g = floor(patient/100)+1) %>% group_by(g)
patients %>% mutate(g = floor(patient/100)+1) %>% group_by(g) %>% activities
library(bupaR)
patients %>% mutate(A = "A", B = "b")
patients %>% mutate(A = "A", B = "b") %>% unite(ab, A, B)
library(bupaR)
patients %>% mutate(A = "A", B = "b") %>% unite(ab, A, B)
patients %>% mutate(A = "A", B = "b") %>% group_by_case %>% unite(ab, A, B)
?unite
library(bupaR)
patients %>% mutate(A = "A", B = "b") %>% group_by_case %>% unite(ab, A, B)
patients %>% mutate(A = "A", B = "b") %>% group_by_case %>% unite(ab, A, B) %>% str
library(bupaR)
?bupaR
library(bupaR)
?mutate
library(bupaR)
patients %>% activities
patients %>% activities %>% arrange(handling)
patients %>% activities %>% arrange("handling")
patients %>% activities %>% arrange(~handling)
patients %>% activities %>% arrange(as.symbol("handling")
)
patients %>% activities %>% arrange(as.symbol("handling"))
patients %>% activities %>% arrange(!!as.symbol("handling"))
?dply
?dplyr
patients %>% activities %>% arrange(!!quo(absolute_frequency))
library(dplyr)
patients %>% activities %>% arrange(!!quo(absolute_frequency))
patients %>% activities %>% arrange(-!!quo(absolute_frequency))
patients %>% activities %>% arrange(quo(absolute_frequency))
patients %>% activities %>% arrange(enquo(absolute_frequency))
patients %>% activities %>% arrange(enquo("absolute_frequency"))
patients %>% activities %>% arrange(!!enquo("absolute_frequency"))
patients %>% activities %>% arrange(!!enquo(absolute_frequency))
patients %>% activities %>% arrange(!!quo(absolute_frequency))
library(bupaR)
"test"
enquo("test")
patients %>% activities %>% arrange(!!enquo("absolute_frequency"))
patients %>% activities %>% arrange(enquo("absolute_frequency"))
enquo
patients %>% activities %>% arrange(!!enquo("absolute_frequency"))
patients %>% activities %>% arrange(!!qou("absolute_frequency"))
patients %>% activities %>% arrange(!!qou(absolute_frequency))
patients %>% activities %>% arrange(!!quo(absolute_frequency))
patients %>% activities
library(bupaR)
patients %>% activities
as.symbol("test")
patients %>% activities
library(bupaR)
patients %>% activities
library(bupaR)
patients %>% activities
library(bupaR)
patients %>% activities
BPIC15_1 %>% activities
patients %>% activities
iris
iris %>% select(one_of("Speciesi"))
iris %>% select(one_of("Species"))
iris %>% select(-one_of("Species"))
count
library(bupaR)
cases(patients)
cases(patients) %>% View
cases(patients)
library(bupaR)
cases(patients)
cases(BPIC15_1)
library(bupaR)
cases(BPIC15_1)
eval("test")
eval(test)
library(bupaR)
cases(BPIC15_1)
library(bupaR)
cases(BPIC15_1)
"test"
quo("test")
as.symbol("test")
quote("test")
x <- test
x <- "test"
x
quote(x)
eval(quote(x))
library(bupaR)
quote("test")
cases(BPIC15_1)
library(bupaR)
cases(BPIC15_1)
eventlog <- patients
eDT <- data.table::as.data.table(eventlog)
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list(case_id(eventlog), activity_instance_id(eventlog)), activity_id(eventlog))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list(case_id(eventlog), activity_instance_id(eventlog), activity_id(eventlog))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list(case_id(eventlog), activity_instance_id(eventlog), activity_id(eventlog))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list(as.symbol(case_id(eventlog)), activity_instance_id(eventlog), activity_id(eventlog))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list(!!as.symbol(case_id(eventlog)), activity_instance_id(eventlog), activity_id(eventlog))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list((!!as.symbol(case_id(eventlog))), activity_instance_id(eventlog), activity_id(eventlog))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by := list((!!as.symbol(case_id(eventlog))), activity_instance_id(eventlog), activity_id(eventlog))]
library(data.table)
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by := list((!!as.symbol(case_id(eventlog))), activity_instance_id(eventlog), activity_id(eventlog))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list((!!as.symbol(case_id(eventlog))), activity_instance_id(eventlog), activity_id(eventlog))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list(!!as.symbol(case_id(eventlog)), activity_instance_id(eventlog), activity_id(eventlog))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list(as.symbol(case_id(eventlog)), activity_instance_id(eventlog), activity_id(eventlog))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list(quo(case_id(eventlog)), activity_instance_id(eventlog), activity_id(eventlog))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list(quotz(case_id(eventlog)), activity_instance_id(eventlog), activity_id(eventlog))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list(quote(case_id(eventlog)), activity_instance_id(eventlog), activity_id(eventlog))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list(fun(get(case_id(eventlog))), activity_instance_id(eventlog), activity_id(eventlog))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list(get(case_id(eventlog)), activity_instance_id(eventlog), activity_id(eventlog))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list(get(case_id(eventlog)), get(activity_instance_id(eventlog)), get(activity_id(eventlog)))]
cases
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list("C" = get(case_id(eventlog)), get(activity_instance_id(eventlog)), get(activity_id(eventlog)))]
cases
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list("A" = get(case_id(eventlog)), "B" = get(activity_instance_id(eventlog)), "C" = get(activity_id(eventlog)))]
cases
cases <- cases[order("timestamp_classifier")), activity_id(eventlog)))),
list(trace = paste(activity_id(eventlog), collapse = ",")),
by = list(case_id(eventlog))]
cases <- cases[order("timestamp_classifier", activity_id(eventlog)),
list(trace = paste(activity_id(eventlog), collapse = ",")),
by = list(case_id(eventlog))]
cases
cases <- cases[order("timestamp_classifier", activity_id(eventlog)),
list(trace = paste(activity_id(eventlog), collapse = ",")),
by = list(get(case_id(eventlog)))]
cases <- cases[order("timestamp_classifier", activity_id(eventlog)),
list(trace = paste(activity_id(eventlog), collapse = ",")),
by = list(get("A")]
cases <- cases %>% mutate(trace_id = as.numeric(factor(trace)))
#	cases <- eventlog %>%
#		group_by(case_classifier, activity_instance_classifier, event_classifier) %>%
#		summarize(timestamp_classifier = min(timestamp_classifier)) %>%
#		group_by(case_classifier) %>%
#		arrange(timestamp_classifier) %>%
#		summarize(trace = paste(event_classifier, collapse = ",")) %>%
#		mutate(trace_id = as.numeric(factor(trace)))
colnames(cases)[colnames(cases) == "case_classifier"] <- case_id(eventlog)
casesDT <- data.table(cases)
cases <- cases %>% data.frame
#traces <- cases %>%
#	group_by(trace, trace_id) %>%
#	summarize(absolute_frequency = n()) %>%
#	ungroup() %>%
#	arrange(desc(absolute_frequency)) %>%
#	mutate(relative_frequency = absolute_frequency/sum(absolute_frequency))
return(cases)
}
traces_light <- function(eventlog){
colnames(eventlog)[colnames(eventlog) == case_id(eventlog)] <- "case_classifier"
colnames(eventlog)[colnames(eventlog) == activity_id(eventlog)] <- "event_classifier"
colnames(eventlog)[colnames(eventlog) == timestamp(eventlog)] <- "timestamp_classifier"
colnames(eventlog)[colnames(eventlog) == activity_instance_id(eventlog)] <- "activity_instance_classifier"
eDT <- data.table::data.table(eventlog)
cases <- eDT[,
.(timestamp_classifier = min(timestamp_classifier)),
by = .(case_classifier, activity_instance_classifier,  event_classifier)]
cases <- cases[order(timestamp_classifier, event_classifier), .(trace = paste(event_classifier, collapse = ",")),
by = .(case_classifier)]
#	cases <- eventlog %>%
#		group_by(case_classifier, activity_instance_classifier, event_classifier) %>%
#		summarize(timestamp_classifier = min(timestamp_classifier)) %>%
#		group_by(case_classifier) %>%
#		arrange(timestamp_classifier) %>%
#		summarize(trace = paste(event_classifier, collapse = ",")) %>%
#		mutate(trace_id = as.numeric(factor(trace)))
casesDT <- data.table(cases)
traces <- casesDT[, .(absolute_frequency = .N), by = .(trace)]
traces <- traces[order(absolute_frequency, decreasing = T),relative_frequency:=absolute_frequency/sum(absolute_frequency)]
traces <- tbl_df(traces)
#traces <- eventlog %>%
#	group_by(case_classifier, activity_instance_classifier, event_classifier) %>%
#	summarize(timestamp_classifier = min(timestamp_classifier)) %>%
#	group_by(case_classifier) %>%
#	arrange(timestamp_classifier) %>%
#	summarize(trace = paste(event_classifier, collapse = ",")) %>%
#	group_by(trace) %>%
#	summarize()
return(traces)
}
summary_statistics <- function(vector) {
s <- summary(vector)
s <- c(s, St.Dev = sd(vector))
s <- c(s, IQR = s[5] - s[2])
names(s) <- c("min","q1","median","mean","q3","max","st_dev","iqr")
s <- as.data.frame(s)
s <- t(s)
row.names(s) <- NULL
return(s)
}
stop_eventlog <- function(eventlog)
if(!("eventlog" %in% class(eventlog)))
stop("Function only applicable for class eventlog")
cases <- cases[order("timestamp_classifier", activity_id(eventlog)),
list(trace = paste(activity_id(eventlog), collapse = ",")),
by = list(get("A"))]
cases <- cases[order("timestamp_classifier", activity_id(eventlog)),
list(trace = paste(activity_id(eventlog), collapse = ",")),
by = list(get("A"))]
cases <- cases[order("timestamp_classifier", activity_id(eventlog)),
list(trace = paste(activity_id(eventlog), collapse = ",")),
by = list(get(A))]
cases <- cases[order("timestamp_classifier", activity_id(eventlog)),
list(trace = paste(activity_id(eventlog), collapse = ",")),
by = list("D" = get(A))]
cases
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list("A" = get(case_id(eventlog)), "B" = get(activity_instance_id(eventlog)), "C" = get(activity_id(eventlog)))]
cases <- cases[order("timestamp_classifier", activity_id(eventlog)),
list(trace = paste(activity_id(eventlog), collapse = ",")),
by = list("D" = get(A))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list("A" = get(case_id(eventlog)), "B" = get(activity_instance_id(eventlog)), "C" = get(activity_id(eventlog)))]
cases <- cases[order("timestamp_classifier", activity_id(eventlog)),
list(trace = paste(activity_id(eventlog), collapse = ",")),
by = list("D" = get("A"))]
cases
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list("A" = get(case_id(eventlog)), "B" = get(activity_instance_id(eventlog)), "C" = get(activity_id(eventlog)))]
cases
cases <- cases[order("timestamp_classifier", activity_id(eventlog)),
list(trace = paste(get(activity_id(eventlog)), collapse = ",")),
by = list("D" = get("A"))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list("A" = get(case_id(eventlog)), "B" = get(activity_instance_id(eventlog)), "C" = get(activity_id(eventlog)))]
cases <- cases[order("timestamp_classifier", activity_id(eventlog)),
list(trace = paste(get("C"), collapse = ",")),
by = list("D" = get("A"))]
cases
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list("A" = get(case_id(eventlog)), "B" = get(activity_instance_id(eventlog)), "C" = get(activity_id(eventlog)))]
cases <- cases[order(get("timestamp_classifier"), get("C"),
list(trace = paste(get("C"), collapse = ",")),
by = list("D" = get("A"))]
cases <- cases %>% mutate(trace_id = as.numeric(factor(trace)))
#	cases <- eventlog %>%
#		group_by(case_classifier, activity_instance_classifier, event_classifier) %>%
#		summarize(timestamp_classifier = min(timestamp_classifier)) %>%
#		group_by(case_classifier) %>%
#		arrange(timestamp_classifier) %>%
#		summarize(trace = paste(event_classifier, collapse = ",")) %>%
#		mutate(trace_id = as.numeric(factor(trace)))
colnames(cases)[colnames(cases) == "case_classifier"] <- case_id(eventlog)
casesDT <- data.table(cases)
cases <- cases %>% data.frame
#traces <- cases %>%
#	group_by(trace, trace_id) %>%
#	summarize(absolute_frequency = n()) %>%
#	ungroup() %>%
#	arrange(desc(absolute_frequency)) %>%
#	mutate(relative_frequency = absolute_frequency/sum(absolute_frequency))
return(cases)
}
traces_light <- function(eventlog){
colnames(eventlog)[colnames(eventlog) == case_id(eventlog)] <- "case_classifier"
colnames(eventlog)[colnames(eventlog) == activity_id(eventlog)] <- "event_classifier"
colnames(eventlog)[colnames(eventlog) == timestamp(eventlog)] <- "timestamp_classifier"
colnames(eventlog)[colnames(eventlog) == activity_instance_id(eventlog)] <- "activity_instance_classifier"
eDT <- data.table::data.table(eventlog)
cases <- eDT[,
.(timestamp_classifier = min(timestamp_classifier)),
by = .(case_classifier, activity_instance_classifier,  event_classifier)]
cases <- cases[order(timestamp_classifier, event_classifier), .(trace = paste(event_classifier, collapse = ",")),
by = .(case_classifier)]
#	cases <- eventlog %>%
#		group_by(case_classifier, activity_instance_classifier, event_classifier) %>%
#		summarize(timestamp_classifier = min(timestamp_classifier)) %>%
#		group_by(case_classifier) %>%
#		arrange(timestamp_classifier) %>%
#		summarize(trace = paste(event_classifier, collapse = ",")) %>%
#		mutate(trace_id = as.numeric(factor(trace)))
casesDT <- data.table(cases)
traces <- casesDT[, .(absolute_frequency = .N), by = .(trace)]
traces <- traces[order(absolute_frequency, decreasing = T),relative_frequency:=absolute_frequency/sum(absolute_frequency)]
traces <- tbl_df(traces)
#traces <- eventlog %>%
#	group_by(case_classifier, activity_instance_classifier, event_classifier) %>%
#	summarize(timestamp_classifier = min(timestamp_classifier)) %>%
#	group_by(case_classifier) %>%
#	arrange(timestamp_classifier) %>%
#	summarize(trace = paste(event_classifier, collapse = ",")) %>%
#	group_by(trace) %>%
#	summarize()
return(traces)
}
summary_statistics <- function(vector) {
s <- summary(vector)
s <- c(s, St.Dev = sd(vector))
s <- c(s, IQR = s[5] - s[2])
names(s) <- c("min","q1","median","mean","q3","max","st_dev","iqr")
s <- as.data.frame(s)
s <- t(s)
row.names(s) <- NULL
return(s)
}
stop_eventlog <- function(eventlog)
if(!("eventlog" %in% class(eventlog)))
stop("Function only applicable for class eventlog")
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list("A" = get(case_id(eventlog)), "B" = get(activity_instance_id(eventlog)), "C" = get(activity_id(eventlog)))]
cases <- cases[order(get("timestamp_classifier"), get("C")),
list(trace = paste(get("C"), collapse = ",")),
by = list("D" = get("A"))]
cases
cases <- cases[order(get("timestamp_classifier"), get("C")),
list(trace = paste(get("C"), collapse = ",")),
by = list(case_id(eventlog) = get("A"))]
cases <- cases[order(get("timestamp_classifier"), get("C")),
list(trace = paste(get("C"), collapse = ",")),
by = list(get(case_id(eventlog)) = get("A"))]
cases <- cases[order(get("timestamp_classifier"), get("C")),
list(trace = paste(get("C"), collapse = ",")),
by = list("CASE" = get("A"))]
cases <- eDT[,
list("timestamp_classifier" = min(timestamp(eventlog))),
by = list("A" = get(case_id(eventlog)), "B" = get(activity_instance_id(eventlog)), "C" = get(activity_id(eventlog)))]
cases <- cases[order(get("timestamp_classifier"), get("C")),
list(trace = paste(get("C"), collapse = ",")),
by = list("CASE" = get("A"))]
cases
cases <- cases %>% mutate(trace_id = as.numeric(factor(!!as.symbol("trace")))) %>%
rename(case_id(eventlog) =: "CASE")
cases <- cases %>% mutate(trace_id = as.numeric(factor(!!as.symbol("trace")))) %>%
rename(case_id(eventlog) := "CASE")
cases <- cases %>% mutate(trace_id = as.numeric(factor(!!as.symbol("trace")))) %>%
rename(!!as.symbol(case_id(eventlog)) := "CASE")
cases
cases %>% count(patient)
cases %>% count(trace)
library(bupaR)
cases(patients)
traces(patients)
library(bupaR)
traces(patients)
sub_name = "Investigation"
library(bupaR)
